<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" href="styles.css" />
  </head>
  <body>
    <nav id="navbar">
      <header>Solidity Con Ejemplos</header>
      <ul>
        <li><a class="nav-link" href="#Hola Mundo">Hola Mundo </a></li>
        <li>
          <a class="nav-link" href="#Primera Aplicacion"
            >Primera Aplicacion</a
          >
        </li>
        <li>
          <a class="nav-link" href="#Tipos De Datos Primitivos"
            >Tipos De Datos Primitivos</a
          >
        </li>
        <li><a class="nav-link" href="#Variables">Variables</a></li>
        <li><a class="nav-link" href="#Constantes">Constantes</a></li>
    </nav>
    <main id="main-doc">
      <section class="main-section" id="Hola Mundo">
        <header>Hola Mundo</header>
        <article>
          <code>
// SPDX-License-Identifier: MIT

// compiler version must be greater than or equal to 0.8.24 and less than 0.9.0  

pragma solidity ^0.8.24;
           
contract HelloWorld {
    string public greet = "Hello World!";
}
        </code>
        </article>
      </section>
      <section class="main-section" id="Primera Aplicacion">
        <header>Primera Aplicacion</header>
        <article>
          <p> Aquí hay un contrato simple que puede obtener, incrementar y disminuir el recuento almacenado en este contrato. </p>
          <code>
          // SPDX-License-Identifier: MIT</p>
          pragma solidity ^0.8.24;</p>
    
           contract Counter {
    uint256 public count;

    // Function to get the current count
    function get() public view returns (uint256) {
        return count;
    }

    // Function to increment count by 1
    function inc() public {
        count += 1;
    }

    // Function to decrement count by 1
    function dec() public {
        // This function will fail if count = 0
        count -= 1;
    }
} 
          </code>
        </article>
      </section>
      <section class="main-section" id="Tipos de Datos Primitivos">
        <header>Tipos de Datos Primitivos</header>
        <article>
          <p>
            Aquí le presentamos algunos tipos de datos primitivos disponibles en Solidity.
          </p>

          <ul>
            <li>Bolean </li>
            <li>Uint256 </li>
            <li>int256</li>
            <li>address</li>
          </ul>
          <code>
            // SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract Primitives {
    bool public boo = true;

    /*
    uint stands for unsigned integer, meaning non negative integers
    different sizes are available
        uint8   ranges from 0 to 2 ** 8 - 1
        uint16  ranges from 0 to 2 ** 16 - 1
        ...
        uint256 ranges from 0 to 2 ** 256 - 1
    */
    uint8 public u8 = 1;
    uint256 public u256 = 456;
    uint256 public u = 123; // uint is an alias for uint256

    /*
    Negative numbers are allowed for int types.
    Like uint, different ranges are available from int8 to int256
    
    int256 ranges from -2 ** 255 to 2 ** 255 - 1
    int128 ranges from -2 ** 127 to 2 ** 127 - 1
    */
    int8 public i8 = -1;
    int256 public i256 = 456;
    int256 public i = -123; // int is same as int256

    // minimum and maximum of int
    int256 public minInt = type(int256).min;
    int256 public maxInt = type(int256).max;

    address public addr = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;

    /*
    In Solidity, the data type byte represent a sequence of bytes. 
    Solidity presents two type of bytes types :

     - fixed-sized byte arrays
     - dynamically-sized byte arrays.
     
     The term bytes in Solidity represents a dynamic array of bytes. 
     It’s a shorthand for byte[] .
    */
    bytes1 a = 0xb5; //  [10110101]
    bytes1 b = 0x56; //  [01010110]

    // Default values
    // Unassigned variables have a default value
    bool public defaultBoo; // false
    uint256 public defaultUint; // 0
    int256 public defaultInt; // 0
    address public defaultAddr; // 0x0000000000000000000000000000000000000000
}
          </code>
        </article>
      </section>
      <section class="main-section" id="Variables">
        <header>Variables</header>
        <article>
          Hay 3 tipos de variables en Solidity
          <ul>Local
            <li>declarado dentro de una función</li>
            <li>no almacenado en la cadena de bloques</li>
          </ul>
          <ul>Estado
            <li>declarado fuera de una función</li>
            <li>almacenado en la cadena de bloques</li>
          </ul>
           <ul>Global(proporciona información sobre la cadena de bloques)
          </ul>
          <code>
            // SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract Variables {
    // State variables are stored on the blockchain.
    string public text = "Hello";
    uint256 public num = 123;

    function doSomething() public {
        // Local variables are not saved to the blockchain.
        uint256 i = 456;

        // Here are some global variables
        uint256 timestamp = block.timestamp; // Current block timestamp
        address sender = msg.sender; // address of the caller
    }
}
          </code>
        </article>
      </section>
      <section class="main-section" id="Constantes">
        <header>Constantes</header>
        <p>
          Las constantes son variables que no se pueden modificar.

Su valor está codificado y el uso de constantes puede ahorrar costos de gas.
        </p>
        <code>
     // SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract Constants {
    // coding convention to uppercase constant variables
    address public constant MY_ADDRESS =
        0x777788889999AaAAbBbbCcccddDdeeeEfFFfCcCc;
    uint256 public constant MY_UINT = 123;
}
        </code>
      </section>
    </main>
  </body>
</html>
